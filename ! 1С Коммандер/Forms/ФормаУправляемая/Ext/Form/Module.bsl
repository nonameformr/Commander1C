&НаКлиенте
Перем ФТПСоединениеЛево;
&НаКлиенте
Перем ФТПСоединениеПраво;
&НаКлиенте
Перем МассивПлатформа, СисИнф, ВерсияБольше838;

Перем МакетКартинокДисков;

///////////////////////////////////////////////////////////////////////////////
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Обработка = РеквизитФормыВЗначение("Объект");
	МакетКартинкиПапка = Обработка.ПолучитьМакет("КартинкаПапка");
	Объект.КартинкаПапки = Новый Картинка(МакетКартинкиПапка);
	
	КартинкиДисков = Обработка.ПолучитьМакет("КартинкиДисков");
	//КартинкаДисков = Новый Картинка(МакетКартинокДисков);
	////КартинкаДисков.НаборВариантов = Истина;
	//Объект.КартинкиДисков = КартинкаДисков;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//для веб-клиента требуется дополнительно подключение расширения работы с файлами
	#Если ВебКлиент Тогда
		Результат = ПодключитьРасширениеРаботыСФайлами();
		
		//если подключить не удалось - требуется установить его (в первый раз)
		Если не Результат Тогда
			//устанавливаем
			НачатьУстановкуРасширенияРаботыСФайлами();
			//если не удалось установить - то повторный вызов подключения будет неудачный
			Если не ПодключитьРасширениеРаботыСФайлами() Тогда
				//сообщаем об ошибке и прерываем работу программы
				ВызватьИсключение "Ошибка. Ваш браузер не поддерживает работу с файлами.";
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли
	
	Если СисИнф.ТипПлатформы = ТипПлатформы.Windows_x86 или СисИнф.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Объект.ПутьЛево = "C:";
		Объект.ПутьПраво = "C:";
	Иначе
		Объект.ПутьЛево = "/";
		Объект.ПутьПраво = "/";
	КонецЕсли; 
	
	#Если Не ВебКлиент Тогда
	Если ВерсияБольше838 Тогда
		ПанельЗадачОС.УстановитьНаклейку(БиблиотекаКартинок.Константа, Ложь);
	КонецЕсли;
	#КонецЕсли
	
	ФлагМестаЧтенияЛево = "Клиент";
	ФлагМестаЧтенияПраво = "Клиент";
	
	ПрочитатьСписокДисков("СписокДисковЛево", ФлагМестаЧтенияЛево);
	ПрочитатьСписокДисков("СписокДисковПраво", ФлагМестаЧтенияПраво);
	ПрочитатьСписокФайловЛокально("СписокФайловЛево", "ПутьЛево");
	ПрочитатьСписокФайловЛокально("СписокФайловПраво", "ПутьПраво");
	
	#Если ВебКлиент Тогда
		Элементы.ИмяКомпьютераЛево.Заголовок = "";
		Элементы.ИмяКомпьютераПраво.Заголовок = "";
	#Иначе
		Элементы.ИмяКомпьютераЛево.Заголовок = ИмяКомпьютера();
		Элементы.ИмяКомпьютераПраво.Заголовок = ИмяКомпьютера();
	#КонецЕсли
	
	ПоказатьРазмерДиска(ФлагМестаЧтенияЛево, "СписокДисковЛево", "РазмерЛево");
	ПоказатьРазмерДиска(ФлагМестаЧтенияПраво, "СписокДисковПраво", "РазмерПраво");
	
	Элементы.ФлагМестаЧтенияЛево.СписокВыбора.Добавить("Клиент","Клиент");
	СтрокаСоединенияИБ = СтрокаСоединенияИнформационнойБазы();
	Элементы.ИнформацияСервер.Видимость = Ложь;
	Если Найти(СтрокаСоединенияИБ, "Srvr") <> 0 или Найти(СтрокаСоединенияИБ, "ws") <> 0  Тогда
		Элементы.ФлагМестаЧтенияЛево.СписокВыбора.Добавить("Сервер", "Сервер");
		Элементы.ИнформацияСервер.Видимость = Истина;
	ИначеЕсли Найти(СтрокаСоединенияИБ, "ws") <> 0 Тогда // выделим доступ на веб сервере, если...
		#Если ВебКлиент Тогда
		     Элементы.ФлагМестаЧтенияЛево.СписокВыбора.Добавить("ВебКлиент", "Веб клиент");
		#КонецЕсли 	
	КонецЕсли;
	#Если не ВебКлиент Тогда
		Элементы.ФлагМестаЧтенияЛево.СписокВыбора.Добавить("FTP", "FTP");
	#КонецЕсли
	
	Элементы.ФлагМестаЧтенияПраво.СписокВыбора.ЗагрузитьЗначения(Элементы.ФлагМестаЧтенияЛево.СписокВыбора.ВыгрузитьЗначения());
	
	Элементы.СтраницаТерминалЛинукс.Видимость = Элементы.ФлагМестаЧтенияЛево.СписокВыбора.НайтиПоЗначению("Сервер") <> Неопределено и ЭтоСерверЛинукс();
	
	Объект.СтрокаСоединения = СтрокаСоединенияИБ;
	
	Элементы.ГруппаФТПЛево.Видимость = Ложь;
	Элементы.ГруппаФТППраво.Видимость = Ложь;
	
КонецПроцедуры

#Область Работа_с_файлами

#Область Копирование

&НаКлиенте
Процедура СкопироватьССервера(Команда)
	
	//файлссервера = ПолучитьФайлССервера();
	//файлссервера.записать(Объект.ИмяФайлаЛок);
	
КонецПроцедуры


#КонецОбласти

#Область Удаление

&НаКлиенте
Процедура СписокФайловПередУдалением(Элемент, Отказ)
	
	УдалениеФайла("");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВопросаОбУдалении(Результат, Параметры) Экспорт

	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	ТекущийЭлемент = ЭтаФорма.ТекущийЭлемент;
	Если ТекущийЭлемент.Имя = "СписокФайловЛево" Тогда
		ИмяПути = "Лево";
		ФлагМеста = ФлагМестаЧтенияЛево;
		ИмяЭлементаОбновления = "СписокФайловЛево";
		ФТПСоединение = ФТПСоединениеЛево;
	ИначеЕсли ТекущийЭлемент.Имя = "СписокФайловПраво" Тогда
		ИмяПути = "Право";
		ФлагМеста = ФлагМестаЧтенияПраво;
		ИмяЭлементаОбновления = "СписокФайловПраво";
		ФТПСоединение = ФТПСоединениеПраво;
	Иначе
		
	КонецЕсли;
			
	Попытка
		Если ФлагМеста = "Сервер" Тогда
			УдалитьНаСервере(Объект["Путь"+ИмяПути]+"\"+Параметры.Файл);
		ИначеЕсли ФлагМеста = "Клиент" Тогда 
			ОО = Новый ОписаниеОповещения("ВыполнитьПослеУдаленияФайлов", ЭтаФорма);
			НачатьУдалениеФайлов(ОО, Объект["Путь"+ИмяПути]+"\"+Параметры.Файл);
		ИначеЕсли ФлагМеста = "FTP" Тогда 
			ФТПСоединение.Удалить(Объект["Путь"+ИмяПути], Параметры.Файл);
		КонецЕсли;
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить(); 
	КонецПопытки;
	ПрочитатьСписокФайлов("Обновить", ИмяЭлементаОбновления, ИмяПути, ФлагМеста);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеУдаленияФайлов(ДополнительныеПараметры) Экспорт
	
	ПрочитатьСписокФайлов("Обновить", "СписокФайловЛево", "Лево", ФлагМестаЧтенияЛево);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНаСервере(ФайлНаСервере)
	
	УдалитьФайлы(ФайлНаСервере);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеФайла(Команда)
	
	ТекущийЭлемент = ЭтаФорма.ТекущийЭлемент;
	ТекущиеДанные = Элементы[ТекущийЭлемент.Имя].ТекущиеДанные;
	ОО = Новый ОписаниеОповещения("ВыполнитьПослеВопросаОбУдалении", ЭтаФорма, ТекущиеДанные);
	ПоказатьВопрос(ОО, "Удалить " + ?(ТекущиеДанные.Каталог, "каталог", "файл") + " """ + ТекущиеДанные.Файл + """?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

#КонецОбласти

#Область Создание_каталога

&НаКлиенте
Процедура СоздатьКаталогКоманда(Команда)
	
	ТекущийЭлемент = ЭтаФорма.ТекущийЭлемент;
	Попытка
		
		ТекущиеДанные = Элементы[ТекущийЭлемент.Имя].ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			Если ТекущийЭлемент.Имя = "СписокФайловЛево" Тогда
				ИмяПути = "Лево";
				ФлагМестаЧтения = ФлагМестаЧтенияЛево;
				ФТПСоединение = ФТПСоединениеЛево;
			ИначеЕсли ТекущийЭлемент.Имя = "СписокФайловПраво" Тогда
				ИмяПути = "Право";
				ФлагМестаЧтения = ФлагМестаЧтенияПраво;
				ФТПСоединение = ФТПСоединениеПраво;
			Иначе
				
			КонецЕсли;
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("ИмяПути", ИмяПути);
			ДопПараметры.Вставить("ИмяЭлемента", ТекущийЭлемент.Имя);
			ДопПараметры.Вставить("ФлагМестаЧтения", ФлагМестаЧтения);
			ДопПараметры.Вставить("ФТПСоединение", ФТПСоединение);
				
			ПоказатьВводСтроки(Новый ОписаниеОповещения("ВыполнитьПослеВводаСтроки", ЭтаФорма, ДопПараметры), "", "Создать каталог");
			 
		Иначе
		КонецЕсли;
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Что-то пошло не так...";
		Сообщение.Сообщить();
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеВводаСтроки(Строка, ДопПараметры) Экспорт

	Если Строка <> Неопределено Тогда
		Если ДопПараметры.ФлагМестаЧтения = "Клиент" Тогда
			ОО = Новый ОписаниеОповещения("ВыполнитьПослеСозданияКаталога", ЭтаФорма, ДопПараметры);
			НачатьСозданиеКаталога(ОО, Объект["Путь"+ДопПараметры.ИмяПути]+"\"+Строка);
		ИначеЕсли ДопПараметры.ФлагМестаЧтения = "Сервер" Тогда 
			СоздатьКаталогНаСервере(ДопПараметры, Строка);
			ПрочитатьСписокФайлов("Обновить", ДопПараметры.ИмяЭлемента, ДопПараметры.ИмяПути, ДопПараметры.ФлагМестаЧтения);
		ИначеЕсли ДопПараметры.ФлагМестаЧтения = "FTP" Тогда
			ДопПараметры.ФТПСоединение.СоздатьКаталог(Объект["Путь"+ДопПараметры.ИмяПути]+"\"+Строка);
			ПрочитатьСписокФайлов("Обновить", ДопПараметры.ИмяЭлемента, ДопПараметры.ИмяПути, ДопПараметры.ФлагМестаЧтения);
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеСозданияКаталога(ИмяКаталога, Параметры) Экспорт

	ПрочитатьСписокФайлов("Обновить", Параметры.ИмяЭлемента, Параметры.ИмяПути, Параметры.ФлагМестаЧтения)

КонецПроцедуры

&НаСервере
Процедура СоздатьКаталогНаСервере(ДопПараметры, НазваниеКаталога)
	
	ИмяКаталога = Объект["Путь"+ДопПараметры.ИмяПути] + "\" + НазваниеКаталога;
	ФайлНаСервере = Новый Файл(ИмяКаталога);
	Если не ФайлНаСервере.Существует() Тогда
		СоздатьКаталог(ИмяКаталога);
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Каталог уже существует";
		Сообщение.Сообщить(); 
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Упаковка

#Если ТонкийКлиент Тогда

&НаКлиенте
Процедура Упаковать(Команда)
	
	ТекущийЭлемент = ЭтаФорма.ТекущийЭлемент;
	Попытка
		
		ТекущиеДанные = Элементы[ТекущийЭлемент.Имя].ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено и не ТекущиеДанные.Каталог Тогда
			
			Если ТекущийЭлемент.Имя = "СписокФайловЛево" Тогда
				ИмяПути = "ПутьЛево";
				ФлагМестаЧтения = ФлагМестаЧтенияЛево;
				ФТПСоединение = ФТПСоединениеЛево;
			ИначеЕсли ТекущийЭлемент.Имя = "СписокФайловПраво" Тогда
				ИмяПути = "ПутьПраво";
				ФлагМестаЧтения = ФлагМестаЧтенияПраво;
				ФТПСоединение = ФТПСоединениеПраво;
			Иначе
				
			КонецЕсли;
			
			ПутьФайлаИсточника = Объект[ИмяПути] + "\" + ТекущиеДанные.Файл;
			//ТекФайл = Новый Файл(ПутьФайлаИсточника);
			ИмяЗипФайла = ПолучитьИмяВременногоФайла(".zip");
			НовыйФайлАрхива = Новый ЗаписьZipФайла(ИмяЗипФайла);
			НовыйФайлАрхива.Добавить(ПутьФайлаИсточника);
			НовыйФайлАрхива.Записать();
			
			
			
			//Если Найти(Объект.СтрокаПоддерживаемыхСтроковыхФайлов, НРег(ТекФайл.Расширение) + ";") = 0 Тогда
			//	Возврат;
			//КонецЕсли; 
			//Состояние("Упаковка файла...");
			//ВесьТекст = "";
			//Если ФлагМестаЧтения = "Клиент" Тогда
			//	
			//	Текст = Новый ТекстовыйДокумент;
			//	Текст.Прочитать(ПутьФайлаИсточника);
			//	
			//	КоличествоСтрок = Текст.КоличествоСтрок();
			//	Для Счетчик = 1 по КоличествоСтрок Цикл
			//	    ТекСтрока = Текст.ПолучитьСтроку(Счетчик);
			//	    ВесьТекст = ВесьТекст + ТекСтрока + Символы.ПС;
			//		ОбработкаПрерыванияПользователя();
			//	КонецЦикла;
			//	ДопПараметры = Новый Структура;
			//	ДопПараметры.Вставить("Документ", ВесьТекст);
			//	ДопПараметры.Вставить("Путь", ПутьФайлаИсточника);
			//	ОткрытьФорму("ВнешняяОбработка.ОдинСКоммандер.Форма.ФормаПросмотра", ДопПараметры,, Истина);
			//	
			//ИначеЕсли ФлагМестаЧтения = "Сервер" Тогда
			//	
			//	ВесьТекст = ПрочитатьФайлНаСервере(ПутьФайлаИсточника);
			//	ДопПараметры = Новый Структура;
			//	ДопПараметры.Вставить("Документ", ВесьТекст);
			//	ДопПараметры.Вставить("Путь", "Сервер: " + ПутьФайлаИсточника);
			//	ОткрытьФорму("ВнешняяОбработка.ОдинСКоммандер.Форма.ФормаПросмотра", ДопПараметры,, Истина);
			//	
			//ИначеЕсли ФлагМестаЧтения = "FTP" Тогда
			//	
			//	#Если ВебКлиент Тогда
			//	Каталог = КаталогВременныхФайлов();
			//	ИмяФайла = Строка(Новый УникальныйИдентификатор) + ".tmp";
			//	ПутьФайлаНазначения = Каталог + ИмяФайла;
			//	#Иначе
			//	ПутьФайлаНазначения = ПолучитьИмяВременногоФайла();
			//	#КонецЕсли 
			//	
			//	ФТПСоединение.Получить(ПутьФайлаИсточника, ПутьФайлаНазначения);
			//	
			//	Текст = Новый ТекстовыйДокумент;
			//	Текст.Прочитать(ПутьФайлаНазначения);
			//	
			//	КоличествоСтрок = Текст.КоличествоСтрок();
			//	Для Счетчик = 1 по КоличествоСтрок Цикл
			//	    ТекСтрока = Текст.ПолучитьСтроку(Счетчик);
			//	    ВесьТекст = ВесьТекст + ТекСтрока + Символы.ПС;
			//		ОбработкаПрерыванияПользователя();
			//	КонецЦикла;
			//	ДопПараметры = Новый Структура;
			//	ДопПараметры.Вставить("Документ", ВесьТекст);
			//	ДопПараметры.Вставить("Путь", "FTP: " + ПутьФайлаИсточника);
			//	ОткрытьФорму("ВнешняяОбработка.ОдинСКоммандер.Форма.ФормаПросмотра", ДопПараметры,, Истина);
			//	УдалитьФайлы(ПутьФайлаНазначения);
			//	
			//КонецЕсли; 
			 
		КонецЕсли;
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Что-то пошло не так...";
		Сообщение.Сообщить();
	КонецПопытки;
	
КонецПроцедуры

#КонецЕсли 

#КонецОбласти

&НаКлиенте
Процедура КопированиеЛево(Команда)
	Копирование("");
КонецПроцедуры

&НаКлиенте
Процедура КопированиеПраво(Команда)
	Копирование("");
КонецПроцедуры

&НаКлиенте
Процедура Копирование(ИмяПути="")
	
	ТекущийЭлемент = ЭтаФорма.ТекущийЭлемент;
	Попытка
		
		ТекущиеДанные = Элементы[ТекущийЭлемент.Имя].ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено и не ТекущиеДанные.Каталог Тогда
			
			Если ТекущийЭлемент.Имя = "СписокФайловЛево" Тогда
				ИмяПути = "ПутьЛево";
				ИмяПутиНазначения = "Право";
				ФлагМестаИсточник = ФлагМестаЧтенияЛево;
				ФлагМестаНазначения = ФлагМестаЧтенияПраво;
				ИмяЭлементаОбновления = "СписокФайловПраво";
				ФТПСоединениеИсточник = ФТПСоединениеЛево;
				ФТПСоединениеНазначения = ФТПСоединениеПраво;
			ИначеЕсли ТекущийЭлемент.Имя = "СписокФайловПраво" Тогда
				ИмяПути = "ПутьПраво";
				ИмяПутиНазначения = "Лево";
				ФлагМестаИсточник = ФлагМестаЧтенияПраво;
				ФлагМестаНазначения = ФлагМестаЧтенияЛево;
				ИмяЭлементаОбновления = "СписокФайловЛево";
				ФТПСоединениеИсточник = ФТПСоединениеПраво;
				ФТПСоединениеНазначения = ФТПСоединениеЛево;
			Иначе
				
			КонецЕсли;
			
			ПутьФайлаИсточника = Объект[ИмяПути] + "\" + ТекущиеДанные.Файл;
			ПутьФайлаНазначения = Объект["Путь"+ИмяПутиНазначения] + "\" + ТекущиеДанные.Файл;
			Состояние("Копирование файла",,, БиблиотекаКартинок.СкопироватьЭлементСписка);
			Если ФлагМестаИсточник = "Клиент" Тогда
				Если ФлагМестаНазначения = "Клиент" Тогда
					КопироватьФайл(ПутьФайлаИсточника, ПутьФайлаНазначения);
				ИначеЕсли ФлагМестаНазначения = "Сервер" Тогда 
					ТекущийФайл = Новый ДвоичныеДанные(ПутьФайлаИсточника);
					Попытка
						ОтправитьФайлНаСервер(Объект["Путь"+ИмяПутиНазначения], ТекущийФайл, ТекущиеДанные.Файл);
					Исключение
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = ОписаниеОшибки();
						Сообщение.Сообщить();
					КонецПопытки;
				ИначеЕсли ФлагМестаНазначения = "FTP" Тогда
					ФТПСоединениеНазначения.Записать(ПутьФайлаИсточника, ПутьФайлаНазначения);
				КонецЕсли;
			ИначеЕсли ФлагМестаИсточник = "Сервер" Тогда 
				Если ФлагМестаНазначения = "Клиент" Тогда
					ТекущийФайл = ПолучитьФайлССервера(ПутьФайлаИсточника);
					Попытка
						ТекущийФайл.Записать(ПутьФайлаНазначения);
					Исключение
					    Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = ОписаниеОшибки();
						Сообщение.Сообщить();
					КонецПопытки; 
				ИначеЕсли ФлагМестаНазначения = "Сервер" Тогда 
					КопироватьФайлНаСервере(ПутьФайлаИсточника, ПутьФайлаНазначения);
				ИначеЕсли ФлагМестаНазначения = "FTP" Тогда
					//TODO
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Еще не реализовано...";
					Сообщение.Сообщить();
				КонецЕсли;
			ИначеЕсли ФлагМестаИсточник = "FTP" Тогда 
				Если ФлагМестаНазначения = "Клиент" Тогда
					ФТПСоединениеИсточник.Получить(ПутьФайлаИсточника, ПутьФайлаНазначения);
				ИначеЕсли ФлагМестаНазначения = "Сервер" Тогда 	
					ТекущийФайл = Новый ДвоичныеДанные(ПутьФайлаИсточника);
					Попытка
						ОтправитьФайлНаСервер(Объект["Путь"+ИмяПутиНазначения], ТекущийФайл, ТекущиеДанные.Файл);
					Исключение
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = ОписаниеОшибки();
						Сообщение.Сообщить();
					КонецПопытки;
				ИначеЕсли ФлагМестаНазначения = "FTP" Тогда
					//TODO
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Еще не реализовано...";
					Сообщение.Сообщить(); 
				КонецЕсли; 
			КонецЕсли; 
			ПрочитатьСписокФайлов("Обновить", ИмяЭлементаОбновления, ИмяПутиНазначения, ФлагМестаНазначения);
			
			Состояние("Копирование окончено",,, БиблиотекаКартинок.ВыполнитьЗадачу);
			 
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Копирование каталогов еще не реализовано";
			Сообщение.Сообщить(); 	
		КонецЕсли;
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Что-то пошло не так..."; //"Необходимо установить курсор на копируемом файле!";
		Сообщение.Сообщить();
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура КопироватьФайлНаСервере(ПутьФайлаИсточника, ПутьФайлаНазначения)
	КопироватьФайл(ПутьФайлаИсточника, ПутьФайлаНазначения);
КонецПроцедуры
 
&НаСервере
Функция ПолучитьФайлССервера(ИмяФайла)
	
	ТекущийФайл = Новый ДвоичныеДанные(ИмяФайла);
	Возврат ТекущийФайл;
	
КонецФункции

&НаСервере
Процедура ОтправитьФайлНаСервер(ПапкаНазначения, Файл, ИмяФайла)
	Файл.Записать(ПапкаНазначения + "\" + ИмяФайла);
КонецПроцедуры

&НаКлиенте
Процедура ФлагМестаЧтенияЛевоОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СписокДисковЛевоОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ФлагМестаЧтенияПравоОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СписокДисковПравоОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура Просмотр(Команда)
	
	ТекущийЭлемент = ЭтаФорма.ТекущийЭлемент;
	Попытка
		
		ТекущиеДанные = Элементы[ТекущийЭлемент.Имя].ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено и не ТекущиеДанные.Каталог Тогда
			
			Если ТекущийЭлемент.Имя = "СписокФайловЛево" Тогда
				ИмяПути = "ПутьЛево";
				ФлагМестаЧтения = ФлагМестаЧтенияЛево;
				ФТПСоединение = ФТПСоединениеЛево;
			ИначеЕсли ТекущийЭлемент.Имя = "СписокФайловПраво" Тогда
				ИмяПути = "ПутьПраво";
				ФлагМестаЧтения = ФлагМестаЧтенияПраво;
				ФТПСоединение = ФТПСоединениеПраво;
			Иначе
				
			КонецЕсли;
			
			ПутьФайлаИсточника = Объект[ИмяПути] + "\" + ТекущиеДанные.Файл;
			ТекФайл = Новый Файл(ПутьФайлаИсточника);
			Если Найти(Объект.СтрокаПоддерживаемыхСтроковыхФайлов, НРег(ТекФайл.Расширение) + ";") = 0 Тогда
				Возврат;
			КонецЕсли; 
			Состояние("Открытие файла");
			ВесьТекст = "";
			Если ФлагМестаЧтения = "Клиент" Тогда
				
				Текст = Новый ТекстовыйДокумент;
				//Текст.Прочитать(ПутьФайлаИсточника);
				ДопПараметры = Новый Структура("Текст, ПутьФайлаИсточника", Текст, ПутьФайлаИсточника);
				Текст.НачатьЧтение(Новый ОписаниеОповещения("ПрочитатьДанныеЗавершение", ЭтаФорма, ДопПараметры), ПутьФайлаИсточника);
				
				//КоличествоСтрок = Текст.КоличествоСтрок();
				//Для Счетчик = 1 по КоличествоСтрок Цикл
				//    ТекСтрока = Текст.ПолучитьСтроку(Счетчик);
				//    ВесьТекст = ВесьТекст + ТекСтрока + Символы.ПС;
				//	ОбработкаПрерыванияПользователя();
				//КонецЦикла;
				//ДопПараметры = Новый Структура;
				//ДопПараметры.Вставить("Документ", ВесьТекст);
				//ДопПараметры.Вставить("Путь", ПутьФайлаИсточника);
				//ОткрытьФорму("ВнешняяОбработка.ОдинСКоммандер.Форма.ФормаПросмотра", ДопПараметры,, Истина);
				
			ИначеЕсли ФлагМестаЧтения = "Сервер" Тогда
				
				ВесьТекст = ПрочитатьФайлНаСервере(ПутьФайлаИсточника);
				ДопПараметры = Новый Структура;
				ДопПараметры.Вставить("Документ", ВесьТекст);
				ДопПараметры.Вставить("Путь", "Сервер: " + ПутьФайлаИсточника);
				ОткрытьФорму("ВнешняяОбработка.ОдинСКоммандер.Форма.ФормаПросмотра", ДопПараметры,, Истина);
				
			ИначеЕсли ФлагМестаЧтения = "FTP" Тогда
				
				#Если ВебКлиент Тогда
				Каталог = КаталогВременныхФайлов();
				ИмяФайла = Строка(Новый УникальныйИдентификатор) + ".tmp";
				ПутьФайлаНазначения = Каталог + ИмяФайла;
				#Иначе
				ПутьФайлаНазначения = ПолучитьИмяВременногоФайла();
				#КонецЕсли 
				
				ФТПСоединение.Получить(ПутьФайлаИсточника, ПутьФайлаНазначения);
				
				Текст = Новый ТекстовыйДокумент;
				Текст.Прочитать(ПутьФайлаНазначения);
				
				КоличествоСтрок = Текст.КоличествоСтрок();
				Для Счетчик = 1 по КоличествоСтрок Цикл
				    ТекСтрока = Текст.ПолучитьСтроку(Счетчик);
				    ВесьТекст = ВесьТекст + ТекСтрока + Символы.ПС;
					ОбработкаПрерыванияПользователя();
				КонецЦикла;
				ДопПараметры = Новый Структура;
				ДопПараметры.Вставить("Документ", ВесьТекст);
				ДопПараметры.Вставить("Путь", "FTP: " + ПутьФайлаИсточника);
				ОткрытьФорму("ВнешняяОбработка.ОдинСКоммандер.Форма.ФормаПросмотра", ДопПараметры,, Истина);
				УдалитьФайлы(ПутьФайлаНазначения);
				
			КонецЕсли; 
			 
		КонецЕсли;
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Что-то пошло не так...";
		Сообщение.Сообщить();
	КонецПопытки;
			
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанныеЗавершение(ДопПараметры) Экспорт
	
	Текст = ДопПараметры.Текст;
	КоличествоСтрок = Текст.КоличествоСтрок();
	ВесьТекст = "";
	Для Счетчик = 1 по КоличествоСтрок Цикл
	    ТекСтрока = Текст.ПолучитьСтроку(Счетчик);
	    ВесьТекст = ВесьТекст + Строка(ТекСтрока) + Символы.ПС;
		ОбработкаПрерыванияПользователя();
	КонецЦикла;
	ДопПараметры2 = Новый Структура;
	ДопПараметры2.Вставить("Документ", ВесьТекст);
	ДопПараметры2.Вставить("Путь", ДопПараметры.ПутьФайлаИсточника);
	ОткрытьФорму("ВнешняяОбработка.ОдинСКоммандер.Форма.ФормаПросмотра", ДопПараметры2,, Истина);
				
КонецПроцедуры
 
&НаСервереБезКонтекста
Функция ПрочитатьФайлНаСервере(ПутьФайлаИсточника)
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ПутьФайлаИсточника);
	
	КоличествоСтрок = Текст.КоличествоСтрок();
	ВесьТекст = "";
	Для Счетчик = 1 по КоличествоСтрок Цикл
	    ТекСтрока = Текст.ПолучитьСтроку(Счетчик);
	    ВесьТекст = ВесьТекст + ТекСтрока + Символы.ПС;
	КонецЦикла;
	
	Возврат ВесьТекст;
КонецФункции

#КонецОбласти

#Область СИСТЕМНАЯ_ИНФОРМАЦИЯ

&НаСервереБезКонтекста
Функция ЭтоСерверЛинукс()
	СисИнф = Новый СистемнаяИнформация;
	Если СисИнф.ТипПлатформы <> ТипПлатформы.Windows_x86 и СисИнф.ТипПлатформы <> ТипПлатформы.Windows_x86_64 Тогда
		Возврат Истина
	Иначе
		Возврат Ложь
	КонецЕсли; 
КонецФункции

&НаСервере
Процедура ИнфаСервераНаСервере()
	
	СисИнф = Новый СистемнаяИнформация;
	Если СисИнф.ТипПлатформы = ТипПлатформы.Windows_x86 или СисИнф.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Shell = Новый COMОбъект("WScript.Shell");
		КоличествоЯдер = Shell.Environment("System").Item("number_of_processors");
		
		Элементы.РазмерыДисков.Заголовок = "Размеры дисков";
	Иначе
		КоличествоЯдер = "подскажите: как определить на linux?";
		
		Элементы.РазмерыДисков.Заголовок = "Размеры дисков (для Linux команда df -ah | grep %)";
		ЗапуститьПриложение("df -ah | grep % > /tmp/size2.txt", , Истина);
		ТекстДок = Новый ТекстовыйДокумент; 
		ТекстДок.Прочитать("/tmp/size2.txt");
		РазмерыДисковСтрока = ТекстДок.ПолучитьТекст();
		
		ТекстДок = Неопределено; 
		УдалитьФайлы("/tmp/size2.txt");
		
		ЗапуститьПриложение("ps -ela > /tmp/process.txt",, Истина);
		ТекстДок = Новый ТекстовыйДокумент; 
		ТекстДок.Прочитать("/tmp/process.txt");
		ПроцессыСтрока = ТекстДок.ПолучитьТекст();
		УдалитьФайлы("/tmp/process.txt");
		
		РазмерыДисков = РазмерыДисковСтрока + Символы.ПС + Символы.ПС + ПроцессыСтрока;
		
	КонецЕсли; 
	
	//НазваниеОС = Shell.Environment("System").Item("os");
	ИнформацияСервер = "Сервер: "+ИмяКомпьютера()+Символы.ПС
						+"Время - "+ТекущаяДатаСеанса()+Символы.ПС
						+"Версия ОС - "+СисИнф.ВерсияОС + Символы.ПС 
						+"Версия 1С - "+СисИнф.ВерсияПриложения+Символы.ПС
						+"Процессор - "+СисИнф.Процессор+Символы.ПС
						+"Количество ядер - " +КоличествоЯдер+Символы.ПС
						+"ОП - "+СисИнф.ОперативнаяПамять+" МБ" + " (" + Окр(СисИнф.ОперативнаяПамять/1024, 2) + " ГБ)" + Символы.ПС
						+"Тип платформы - "+СисИнф.ТипПлатформы+Символы.ПС
						+"Режим совместимости - "+ПолучитьРежимСовместимостиНаСервере();
	//
	//Для Каждого стр Из Shell.Environment("System") Цикл
	//	Сообщение = Новый СообщениеПользователю;
	//	Сообщение.Текст = стр;
	//	Сообщение.Сообщить();
	//КонецЦикла;
	//Network = Новый COMОбъект("WScript.Network");
	//Для Каждого стр Из Network.EnumNetworkDrives() Цикл
	//	Сообщение = Новый СообщениеПользователю;
	//	Сообщение.Текст = стр;
	//	Сообщение.Сообщить();
	//КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнфаСервера(Команда)
	ИнфаСервераНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИнфаКлиента(Команда)
	
	Если СисИнф.ТипПлатформы = ТипПлатформы.Windows_x86 или СисИнф.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		#Если не ВебКлиент Тогда
		Shell = Новый COMОбъект("WScript.Shell");
		КоличествоЯдер = Shell.Environment("System").Item("number_of_processors");
		#КонецЕсли
	Иначе
		КоличествоЯдер = "";
	КонецЕсли;
	
	//НазваниеОС = Shell.Environment("System").Item("os");
	#Если не ВебКлиент Тогда
		ИмяКомпьютера = ИмяКомпьютера();
	#Иначе
		ИмяКомпьютера = "";
	#КонецЕсли
	ИнформацияКлиент = "Клиент: "+ИмяКомпьютера+Символы.ПС
						+"Время - "+ТекущаяДата()+Символы.ПС
						+"Версия ОС - "+СисИнф.ВерсияОС+Символы.ПС
						+"Версия 1С - "+СисИнф.ВерсияПриложения+Символы.ПС
						+"Процессор - "+СисИнф.Процессор+Символы.ПС
						+"Количество ядер - " +КоличествоЯдер+Символы.ПС
						+"ОП - "+СисИнф.ОперативнаяПамять+" МБ" + " (" + Окр(СисИнф.ОперативнаяПамять/1024, 2) + " ГБ)" + Символы.ПС
						+"Тип платформы - "+СисИнф.ТипПлатформы+Символы.ПС
						+"Режим совместимости - "+ПолучитьРежимСовместимостиНаСервере();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИнформацию(Команда)
	ИнфаСервера("");
	ИнфаКлиента("");
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРежимСовместимостиНаСервере()
	Возврат Строка(Метаданные.РежимСовместимости);
КонецФункции

#КонецОбласти // СИСТЕМНАЯ ИНФОРМАЦИЯ

#Область Чтение_списка

&НаКлиенте
Процедура СписокФайловЛевоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПрочитатьСписокФайлов(,"СписокФайловЛево", "Лево", ФлагМестаЧтенияЛево);
КонецПроцедуры

&НаКлиенте
Процедура СписокФайловПравоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПрочитатьСписокФайлов(,"СписокФайловПраво", "Право", ФлагМестаЧтенияПраво);
КонецПроцедуры

// Процедура - Прочитать список файлов
//
// Параметры:
//  РежимЧтения		 - Строка - Может принимать значения "Обновить", "Корень" или ""
//  ИмяЭлемента		 - Строка - таблица формы СписокФайловЛево или СписокФайловПраво
//  ИмяПути			 - Строка - ПутьЛево или ПутьПраво
//  ФлагМестаЧтения	 - Строка - Клиент, Сервер, FTP
//
&НаКлиенте
Процедура ПрочитатьСписокФайлов(РежимЧтения = "", ИмяЭлемента = Неопределено, РасположениеПравоЛево = Неопределено, ФлагМестаЧтения)// = Неопределено)
	
	ТекущиеДанные = Элементы[ИмяЭлемента].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЧтения = "Обновить" Тогда
		
	ИначеЕсли РежимЧтения = "Корень" Тогда // переход в корень
		Если ФлагМестаЧтения = "FTP" Тогда
			Объект["Путь"+РасположениеПравоЛево] = "/"
		Иначе
			Объект["Путь"+РасположениеПравоЛево] = Объект["СписокДисков"+РасположениеПравоЛево]
		КонецЕсли; 
	Иначе
		Если ТекущиеДанные.Файл = " .." Тогда // переход на уровень вверх
			Если НайтиСимволСКонца(Объект["Путь"+РасположениеПравоЛево], "/") <> 0 Тогда // СтрНайти появилось только с 8.3.6 // СтрНайти(Объект.КаталогДляЧтенияФайлов, "\", НаправлениеПоиска.СКонца) <> 0 Тогда
				НовыйПуть = Лев(Объект["Путь"+РасположениеПравоЛево], НайтиСимволСКонца(Объект["Путь"+РасположениеПравоЛево], "/")-1); // 
				Если НовыйПуть = "" Тогда
					Если Лев(Объект["Путь"+РасположениеПравоЛево], 1) = "/" Тогда
						Объект["Путь"+РасположениеПравоЛево] = "/";
					КонецЕсли; 
				Иначе
					Объект["Путь"+РасположениеПравоЛево] = НовыйПуть;
				КонецЕсли; 
			КонецЕсли;
		ИначеЕсли ТекущиеДанные.Каталог Тогда // переход в каталог
			Объект["Путь"+РасположениеПравоЛево] = Объект["Путь"+РасположениеПравоЛево] + ?(Прав(Объект["Путь"+РасположениеПравоЛево], 1) <> "/" , "/", "") + ТекущиеДанные.Файл;
		КонецЕсли; 
	КонецЕсли;
	
	Если ФлагМестаЧтения = "Клиент" Тогда
		ПрочитатьСписокФайловЛокально(ИмяЭлемента, "Путь"+РасположениеПравоЛево);
	ИначеЕсли ФлагМестаЧтения = "Сервер" Тогда
		ПрочитатьСписокФайловНаСервере(ИмяЭлемента, "Путь"+РасположениеПравоЛево);
	ИначеЕсли ФлагМестаЧтения = "FTP" Тогда
		ПрочитатьСписокФайловFTP(ИмяЭлемента, "Путь"+РасположениеПравоЛево);
	КонецЕсли;
	
	//FIX: необходим рефакторинг, сложно читаемый код
	//Если ТекущиеДанные.Файл = " .." и РежимЧтения <> "Обновить" Тогда // переход на уровень вверх
	//	Если НайтиСимволСКонца(Объект[ИмяПути], "/") <> 0 Тогда // 8.3.6 только появилось - СтрНайти(Объект.КаталогДляЧтенияФайлов, "\", НаправлениеПоиска.СКонца) <> 0 Тогда
	//		НовыйПуть = Лев(Объект[ИмяПути], НайтиСимволСКонца(Объект[ИмяПути], "/")-1); // 
	//		Если НовыйПуть = "" Тогда
	//			Если Лев(Объект[ИмяПути], 1) = "/" Тогда
	//				Объект[ИмяПути] = "/";
	//			КонецЕсли; 
	//		Иначе
	//			Объект[ИмяПути] = НовыйПуть;
	//		КонецЕсли; 
	//	КонецЕсли;
	//	Если ФлагМестаЧтения = "Клиент" Тогда
	//		ПрочитатьСписокФайловЛокально(ИмяЭлемента, ИмяПути);
	//	ИначеЕсли ФлагМестаЧтения = "Сервер" Тогда
	//		ПрочитатьСписокФайловНаСервере(ИмяЭлемента, ИмяПути);
	//	ИначеЕсли ФлагМестаЧтения = "FTP" Тогда 
	//		ПрочитатьСписокФайловFTP(ИмяЭлемента, ИмяПути);
	//	КонецЕсли;
	//	Возврат;
	//КонецЕсли;
	//
	//Если ТекущиеДанные.Каталог и РежимЧтения <> "Обновить" Тогда // вход в каталог
	//	Объект[ИмяПути] = Объект[ИмяПути] + ?(Прав(Объект[ИмяПути], 1) <> "/" , "/", "") + ТекущиеДанные.Файл;
	//	Если ФлагМестаЧтения = "Клиент" Тогда
	//		ПрочитатьСписокФайловЛокально(ИмяЭлемента, ИмяПути);
	//	ИначеЕсли ФлагМестаЧтения = "Сервер" Тогда
	//		ПрочитатьСписокФайловНаСервере(ИмяЭлемента, ИмяПути);
	//	ИначеЕсли ФлагМестаЧтения = "FTP" Тогда
	//		ПрочитатьСписокФайловFTP(ИмяЭлемента, ИмяПути);
	//	КонецЕсли;
	//Иначе // просто обновление
	//	Если ФлагМестаЧтения = "Клиент" Тогда
	//		ПрочитатьСписокФайловЛокально(ИмяЭлемента, ИмяПути);
	//	ИначеЕсли ФлагМестаЧтения = "Сервер" Тогда
	//		ПрочитатьСписокФайловНаСервере(ИмяЭлемента, ИмяПути);
	//	ИначеЕсли ФлагМестаЧтения = "FTP" Тогда
	//		ПрочитатьСписокФайловFTP(ИмяЭлемента, ИмяПути);
	//	КонецЕсли;
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСписокФайловНаСервере(ИмяЭлемента, Путь)
	
	Объект[ИмяЭлемента].Очистить();
	ВерхнийУровень = Объект[ИмяЭлемента].Добавить();
	ВерхнийУровень.Файл = " ..";
	ВерхнийУровень.Каталог = Истина;
	СтрокаПути = Объект[Путь];
	Если СтрокаПути = "/" Тогда // Linux
		
	КонецЕсли; 
	НайденныеФайлы = НайтиФайлы(СтрокаПути, "*");
	Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
		Если Прав(НайденныйФайл.ПолноеИмя,1) = "." или Прав(НайденныйФайл.ПолноеИмя,2) = " .." Тогда // Linux первые две строки находит "." и " .."
			Продолжить;
		КонецЕсли; 
		новстр = Объект[ИмяЭлемента].Добавить();
		Если НайденныйФайл.Имя = "" Тогда // в Linux папки в корне отображает без имени
			Если СтрокаПути = "/" Тогда
				новстр.Файл = СтрЗаменить(НайденныйФайл.ПолноеИмя, "/", "");
			Иначе
				новстр.Файл = НайденныйФайл.ПолноеИмя;
			КонецЕсли;
		Иначе
			Если СтрокаПути = "/" Тогда
				новстр.Файл = СтрЗаменить(НайденныйФайл.Имя, "/", "");
			Иначе
				новстр.Файл = НайденныйФайл.Имя;
			КонецЕсли;
		КонецЕсли; 
		
		Расширение = ?(НайденныйФайл.Расширение = "", "", НайденныйФайл.Расширение + ";");
		Если НайденныйФайл.ЭтоКаталог() Тогда
			новстр.Каталог = Истина;
			//#Если ВебКлиент Тогда
			     новстр.Картинка = БиблиотекаКартинок.ОткрытьФайл;
			//#Иначе
				 //новстр.Картинка = Объект.КартинкаПапки;//БиблиотекаКартинок.ОткрытьФайл;
			//#КонецЕсли 
		ИначеЕсли Найти(Объект.СтрокаПоддерживаемыхСтроковыхФайлов, НРег(Расширение)) <> 0 и Расширение <> "" Тогда 
			новстр.Картинка = БиблиотекаКартинок.Документ;
		КонецЕсли;
		Если НЕ НайденныйФайл.ЭтоКаталог() Тогда
			новстр.Размер = Окр(НайденныйФайл.Размер()/(1024*1024), 2);
		КонецЕсли;
		новстр.ДатаИзменения = НайденныйФайл.ПолучитьВремяИзменения();
	КонецЦикла;
	Объект[ИмяЭлемента].Сортировать("Каталог Убыв, Файл");
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьСписокФайловЛокально(ИмяЭлемента, Путь)
	
	#Если не ВебКлиент Тогда
		Элементы.ИмяКомпьютераЛево.Заголовок = ИмяКомпьютера();	
	#Иначе
		Элементы.ИмяКомпьютераЛево.Заголовок = "";
	#КонецЕсли
	
	Объект[ИмяЭлемента].Очистить();
	ВерхнийУровень = Объект[ИмяЭлемента].Добавить();
	ВерхнийУровень.Файл = " ..";
	ВерхнийУровень.Каталог = Истина;
	
	ДопПараметры = Новый Структура("ИмяЭлемента", ИмяЭлемента);
	ОО = Новый ОписаниеОповещения("ВыполнитьПослеПоискаФайлов", ЭтаФорма, ДопПараметры);
	НачатьПоискФайлов(ОО, Объект[Путь], "*");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеПоискаФайлов(НайденныеФайлы, ДопПараметры) Экспорт
	
	ДопПараметры.Вставить("МассивФайлов", НайденныеФайлы);
	ДопПараметры.Вставить("ВсегоФайлов", НайденныеФайлы.Количество());
	ДопПараметры.Вставить("ИндексФайла", 0);
	ОбработкаНайденныхФайлов(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНайденныхФайлов(КонтекстПоиска)
	Если КонтекстПоиска.ИндексФайла >= КонтекстПоиска.ВсегоФайлов Тогда
		Объект[КонтекстПоиска.ИмяЭлемента].Сортировать("Каталог Убыв, Файл");
		Возврат;
	КонецЕсли;
	
	ТекущийФайл = КонтекстПоиска.МассивФайлов[КонтекстПоиска.ИндексФайла];
	КонтекстПоиска.ИндексФайла = КонтекстПоиска.ИндексФайла + 1;
	
	КонтекстПоиска.Вставить("ТекущийФайл", ТекущийФайл);
	
	ТекущийФайл.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("ОбработкаПроверкиЭтоКаталог", ЭтаФорма, КонтекстПоиска, "ОбработкаОшибки", ЭтаФорма));
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПроверкиЭтоКаталог(ЭтоКаталог, КонтекстПоиска) Экспорт
	//Обрабатываем текущий файл...
	ТекущийФайл =  КонтекстПоиска.ТекущийФайл;
	КонтекстПоиска.Вставить("ЭтоКаталог", ЭтоКаталог);
	ТекущийФайл.НачатьПолучениеВремениИзменения(Новый ОписаниеОповещения("ОбработкаПолученияВремениИзменения", ЭтаФорма, КонтекстПоиска));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПолученияВремениИзменения(ВремяИзменения, КонтекстПоиска) Экспорт
	
	ТекущийФайл =  КонтекстПоиска.ТекущийФайл;
	КонтекстПоиска.Вставить("ВремяИзменения", ВремяИзменения);
	
	Если КонтекстПоиска.ЭтоКаталог Тогда
		ВыводДанныхФайлаВСписок(КонтекстПоиска);
	Иначе
		ТекущийФайл.НачатьПолучениеРазмера(Новый ОписаниеОповещения("ОбработкаПолученияРазмера", ЭтаФорма, КонтекстПоиска));
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПолученияРазмера(Размер, КонтекстПоиска) Экспорт
	
	ТекущийФайл =  КонтекстПоиска.ТекущийФайл;
	КонтекстПоиска.Вставить("Размер", Размер);
	
	ВыводДанныхФайлаВСписок(КонтекстПоиска);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОшибки(ИнформацияОбОшибке, СтандартнаяОбработка, КонтекстПоиска) Экспорт
	СтандартнаяОбработка = Ложь;
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ИнформацияОбОшибке.Описание;
	Сообщение.Сообщить(); 
	ОбработкаНайденныхФайлов(КонтекстПоиска); //Продолжаем обработку
КонецПроцедуры
 
&НаКлиенте
Процедура ВыводДанныхФайлаВСписок(КонтекстПоиска)
	
	ТекущийФайл =  КонтекстПоиска.ТекущийФайл;
	новстр = Объект[КонтекстПоиска.ИмяЭлемента].Добавить();
	новстр.Файл = ТекущийФайл.Имя;
	Расширение = ?(ТекущийФайл.Расширение = "", "", ТекущийФайл.Расширение + ";");
	Если КонтекстПоиска.ЭтоКаталог Тогда
		новстр.Каталог = Истина;
		#Если ВебКлиент Тогда
			новстр.Картинка = БиблиотекаКартинок.ОткрытьФайл;
		#Иначе
			новстр.Картинка = Объект.КартинкаПапки;
		#КонецЕсли
	ИначеЕсли Найти(Объект.СтрокаПоддерживаемыхСтроковыхФайлов, НРег(Расширение)) <> 0 и Расширение <> "" Тогда 
		новстр.Картинка = БиблиотекаКартинок.Документ;
	КонецЕсли;
	Если НЕ КонтекстПоиска.ЭтоКаталог Тогда
		#Если не ВебКлиент Тогда
		новстр.Размер = Окр(КонтекстПоиска.Размер/(1024*1024), 2); //ТекущийФайл.Размер()
		#КонецЕсли
	КонецЕсли; 
	#Если не ВебКлиент Тогда
	новстр.ДатаИзменения = КонтекстПоиска.ВремяИзменения; //ТекущийФайл.ПолучитьВремяИзменения();
	#КонецЕсли
	
	ОбработкаНайденныхФайлов(КонтекстПоиска); //Продолжаем обработку
КонецПроцедуры


&НаКлиенте
Процедура ПрочитатьСписокФайловFTP(ИмяЭлемента, Путь)
	
	Объект[ИмяЭлемента].Очистить();
	ВерхнийУровень = Объект[ИмяЭлемента].Добавить();
	ВерхнийУровень.Файл = " ..";
	ВерхнийУровень.Каталог = Истина;
	
	Если ИмяЭлемента = "СписокФайловЛево" Тогда
		ФТПСоединение = ФТПСоединениеЛево;
	ИначеЕсли ИмяЭлемента = "СписокФайловПраво" Тогда
		ФТПСоединение = ФТПСоединениеПраво;
	КонецЕсли;
			
	Если ФТПСоединение <> Неопределено Тогда
		НайденныеФайлы = ФТПСоединение.НайтиФайлы(Объект[Путь], "*");
		Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
			Расширение = ?(НайденныйФайл.Расширение = "", "", НайденныйФайл.Расширение + ";");
			новстр = Объект[ИмяЭлемента].Добавить();
			новстр.Файл = НайденныйФайл.Имя;
			Если НайденныйФайл.ЭтоКаталог() Тогда
				новстр.Каталог = Истина;
				новстр.Картинка = Объект.КартинкаПапки;//БиблиотекаКартинок.ОткрытьФайл;
			ИначеЕсли Найти(Объект.СтрокаПоддерживаемыхСтроковыхФайлов, НРег(Расширение)) <> 0 и Расширение <> "" Тогда 
				новстр.Картинка = БиблиотекаКартинок.Документ;
			КонецЕсли;
			Если НЕ НайденныйФайл.ЭтоКаталог() Тогда
				новстр.Размер = Окр(НайденныйФайл.Размер()/(1024*1024), 2);
			КонецЕсли;
			новстр.ДатаИзменения = НайденныйФайл.ПолучитьВремяИзменения();
		КонецЦикла;
		Объект[ИмяЭлемента].Сортировать("Каталог Убыв, Файл");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагМестаЧтенияЛевоПриИзменении(Элемент)
	
	Если ФлагМестаЧтенияЛево = "Клиент" Тогда
		#Если ВебКлиент Тогда
			Элементы.ИмяКомпьютераЛево.Заголовок = "";
		#Иначе
			Элементы.ИмяКомпьютераЛево.Заголовок = ИмяКомпьютера();
		#КонецЕсли 
	ИначеЕсли ФлагМестаЧтенияЛево = "Сервер" Тогда
		Элементы.ИмяКомпьютераЛево.Заголовок = ИмяКомпьютераСервера();
	ИначеЕсли ФлагМестаЧтенияЛево = "FTP" Тогда 
		Объект.СписокФайловЛево.Очистить();
		ВерхнийУровень = Объект.СписокФайловЛево.Добавить();
		ВерхнийУровень.Файл = " ..";
		ВерхнийУровень.Каталог = Истина;
	КонецЕсли;
	
	Элементы.ГруппаИнфоПКЛево.Видимость = ФлагМестаЧтенияЛево = "Клиент" или ФлагМестаЧтенияЛево = "Сервер";
	Элементы.ГруппаФТПЛево.Видимость = ФлагМестаЧтенияЛево = "FTP";
	
	ПрочитатьСписокДисков("СписокДисковЛево", ФлагМестаЧтенияЛево);
	ПоказатьРазмерДиска(ФлагМестаЧтенияЛево, "СписокДисковЛево", "РазмерЛево");
	Если ФлагМестаЧтенияЛево = "FTP" Тогда
		Объект.ПутьЛево = "/"
	Иначе
		Объект.ПутьЛево = Объект.СписокДисковЛево;
	КонецЕсли; 
	ПрочитатьСписокФайлов("Обновить", "СписокФайловЛево", "Лево", ФлагМестаЧтенияЛево);
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагМестаЧтенияПравоПриИзменении(Элемент)
	
	Если ФлагМестаЧтенияПраво = "Клиент" Тогда
		#Если ВебКлиент Тогда
			Элементы.ИмяКомпьютераПраво.Заголовок = "";
		#Иначе
			Элементы.ИмяКомпьютераПраво.Заголовок = ИмяКомпьютера();
		#КонецЕсли 
	ИначеЕсли ФлагМестаЧтенияПраво = "Сервер" Тогда
		Элементы.ИмяКомпьютераПраво.Заголовок = ИмяКомпьютераСервера();
	ИначеЕсли ФлагМестаЧтенияПраво = "FTP" Тогда 
		Объект.СписокФайловПраво.Очистить();
		ВерхнийУровень = Объект.СписокФайловПраво.Добавить();
		ВерхнийУровень.Файл = " ..";
		ВерхнийУровень.Каталог = Истина;
	КонецЕсли;
	
	Элементы.ГруппаИнфоПКПраво.Видимость = ФлагМестаЧтенияПраво = "Клиент" или ФлагМестаЧтенияПраво = "Сервер";
	Элементы.ГруппаФТППраво.Видимость = ФлагМестаЧтенияПраво = "FTP";
	
	ПрочитатьСписокДисков("СписокДисковПраво", ФлагМестаЧтенияПраво);
	ПоказатьРазмерДиска(ФлагМестаЧтенияПраво, "СписокДисковПраво", "РазмерПраво");
	Если ФлагМестаЧтенияПраво = "FTP" Тогда
		Объект.ПутьПраво = "/"
	Иначе
		Объект.ПутьПраво = Объект.СписокДисковПраво;
	КонецЕсли; 
	ПрочитатьСписокФайлов("Обновить", "СписокФайловПраво", "Право", ФлагМестаЧтенияПраво);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЛево(Команда)
	ПрочитатьСписокФайлов("Обновить", "СписокФайловЛево", "Лево", ФлагМестаЧтенияЛево);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПраво(Команда)
	ПрочитатьСписокФайлов("Обновить", "СписокФайловПраво", "Право", ФлагМестаЧтенияПраво);
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВКореньЛево(Команда)
	ПрочитатьСписокФайлов("Корень", "СписокФайловЛево", "Лево", ФлагМестаЧтенияЛево);
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВКореньПраво(Команда)
	ПрочитатьСписокФайлов("Корень", "СписокФайловПраво", "Право", ФлагМестаЧтенияПраво);
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьСписокДисков(ИмяЭлемента, ФлагМестаЧтения)
	Элементы[ИмяЭлемента].СписокВыбора.Очистить();
	Если ФлагМестаЧтения = "Клиент" Тогда
		ПрочитатьСписокДисковЛокально(ИмяЭлемента);
	ИначеЕсли ФлагМестаЧтения = "Сервер" Тогда
		ПрочитатьСписокДисковСервер(ИмяЭлемента);
	ИначеЕсли ФлагМестаЧтения = "FTP" Тогда
		
	КонецЕсли;
	Если Элементы[ИмяЭлемента].СписокВыбора.Количество() Тогда
		Объект[ИмяЭлемента] = Элементы[ИмяЭлемента].СписокВыбора[0].Значение;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьСписокДисковЛокально(ИмяЭлемента)
	Если СисИнф.ТипПлатформы = ТипПлатформы.Windows_x86 или СисИнф.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		#Если ВебКлиент Тогда
			Элементы[ИмяЭлемента].СписокВыбора.Добавить("C:");
		#Иначе
			FSO = Новый COMОбъект("Scripting.FileSystemObject");
			Для Каждого стр Из FSO.Drives Цикл
				Элементы[ИмяЭлемента].СписокВыбора.Добавить(стр.Path, ?(стр.DriveType = 3, стр.Path+" ("+стр.ShareName+")", ""),, ПолучитьКартинкуДиска(стр.DriveType));//, стр.Path + " ["+стр.VolumeName+"]");
			КонецЦикла;
		#КонецЕсли
	Иначе
		Элементы[ИмяЭлемента].СписокВыбора.Добавить("/");
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСписокДисковСервер(ИмяЭлемента)
	СисИнф = Новый СистемнаяИнформация;
	Если СисИнф.ТипПлатформы = ТипПлатформы.Windows_x86 Или СисИнф.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		FSO = Новый COMОбъект("Scripting.FileSystemObject");
		Для Каждого стр Из FSO.Drives Цикл
			Элементы[ИмяЭлемента].СписокВыбора.Добавить(стр.Path, ?(стр.DriveType = 3, стр.Path+" ("+стр.ShareName+")", ""),, ПолучитьКартинкуДиска(стр.DriveType));//, стр.Path + " ["+стр.VolumeName+"]");
		КонецЦикла;	
	Иначе
		Элементы[ИмяЭлемента].СписокВыбора.Добавить("/");
		//ФайлыВКорне = НайтиФайлы("/", "*");
		//Для н=2 по ФайлыВКорне.Количество()-1 Цикл // первые две строки находит "." и " .."
		//	Элементы[ИмяЭлемента].СписокВыбора.Добавить(ФайлыВКорне[н].ПолноеИмя);
		//КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКартинкуДиска(ТипДиска)
	Если ТипДиска = 1 Тогда
		КартинкаДиска = КартинкиДисков.Рисунки["diskremove"].Картинка
	ИначеЕсли ТипДиска = 2 Тогда
		КартинкаДиска = КартинкиДисков.Рисунки["diskhdd"].Картинка
	ИначеЕсли ТипДиска = 3 Тогда
		КартинкаДиска = КартинкиДисков.Рисунки["disknet"].Картинка
	ИначеЕсли ТипДиска = 4 Тогда
		КартинкаДиска = КартинкиДисков.Рисунки["diskcdrom"].Картинка
	ИначеЕсли ТипДиска = 5 Тогда
		КартинкаДиска = КартинкиДисков.Рисунки["diskram"].Картинка
	Иначе
		КартинкаДиска = Новый Картинка;
	КонецЕсли;
	
	Возврат КартинкаДиска;
КонецФункции
 
&НаКлиенте
Процедура СписокДисковЛевоПриИзменении(Элемент)
	
	Объект.ПутьЛево = Объект.СписокДисковЛево;
	ПрочитатьСписокФайлов("Обновить", "СписокФайловЛево", "Лево", ФлагМестаЧтенияЛево);
	ПоказатьРазмерДиска(ФлагМестаЧтенияЛево, "СписокДисковЛево", "РазмерЛево");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДисковПравоПриИзменении(Элемент)
	Объект.ПутьПраво = Объект.СписокДисковПраво;
	ПрочитатьСписокФайлов("Обновить", "СписокФайловПраво", "Право", ФлагМестаЧтенияПраво);
	ПоказатьРазмерДиска(ФлагМестаЧтенияПраво, "СписокДисковПраво", "РазмерПраво");
КонецПроцедуры

#Область Размеры_дисков

&НаКлиенте
Процедура ПоказатьРазмерДиска(ФлагМестаЧтения, ИмяЭлементаДиска, ИмяЭлементаНадписи)
	
	Если ФлагМестаЧтения = "Клиент" Тогда
		ПоказатьРазмерДискаНаКлиенте(ИмяЭлементаДиска, ИмяЭлементаНадписи);
	Иначе
		ПоказатьРазмерДискаНаСервере(ИмяЭлементаДиска, ИмяЭлементаНадписи);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРазмерДискаНаКлиенте(ИмяЭлементаДиска, ИмяЭлементаНадписи)
	
	Если СисИнф.ТипПлатформы = ТипПлатформы.Windows_x86 или СисИнф.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		#Если ВебКлиент Тогда
			Элементы[ИмяЭлементаНадписи].Заголовок = "";
		#Иначе
			РазмерДискаWindowsКлиент(ИмяЭлементаДиска, ИмяЭлементаНадписи);
		#КонецЕсли
	Иначе
		РазмерДискаLinuxКлиент(ИмяЭлементаДиска);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьРазмерДискаНаСервере(ИмяЭлементаДиска, ИмяЭлементаНадписи)
	
	СисИнф = Новый СистемнаяИнформация;
	Если СисИнф.ТипПлатформы = ТипПлатформы.Windows_x86 или СисИнф.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		РазмерДискаWindowsСервер(ИмяЭлементаДиска, ИмяЭлементаНадписи);
	Иначе
		//РазмерДискаLinuxСервер(ИмяЭлементаДиска);
		Элементы[ИмяЭлементаНадписи].Заголовок = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазмерДискаWindowsКлиент(ИмяЭлементаДиска, ИмяЭлементаНадписи)
	
	FSO = Новый COMОбъект("Scripting.FileSystemObject");
	Drive = FSO.GetDrive(Объект[ИмяЭлементаДиска]);
	Если Drive.IsReady Тогда
		Попытка
			СвободноеМесто = Drive.AvailableSpace;
			ВсегоМеста = Drive.TotalSize;
			ТипФС = Drive.FileSystem;
			//ТипДиска = Drive.DriveType;
			МеткаДиска = Drive.VolumeName;
			
			Элементы[ИмяЭлементаНадписи].Заголовок = "["+ МеткаДиска +"]  свободно " + Формат(СвободноеМесто/Объект.ЗнаменательДляГигаБайт, "ЧДЦ=2") + " ГБ из " + Формат(ВсегоМеста/Объект.ЗнаменательДляГигаБайт, "ЧДЦ=2") + " ГБ (" + ТипФС + ")";
		Исключение
		    Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОписаниеОшибки();
			Сообщение.Сообщить();
		КонецПопытки;
	Иначе
		Элементы[ИмяЭлементаНадписи].Заголовок = "не готов";
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "В диске нет устройства";
		Сообщение.Сообщить(); 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура РазмерДискаWindowsСервер(ИмяЭлементаДиска, ИмяЭлементаНадписи)
	
	FSO = Новый COMОбъект("Scripting.FileSystemObject");
	Drive = FSO.GetDrive(Объект[ИмяЭлементаДиска]);
	Если Drive.IsReady Тогда
		Попытка
			СвободноеМесто = Drive.AvailableSpace;
			ВсегоМеста = Drive.TotalSize;
			ТипФС = Drive.FileSystem;
			//ТипДиска = Drive.DriveType;
			МеткаДиска = Drive.VolumeName;
			
			Элементы[ИмяЭлементаНадписи].Заголовок ="["+ МеткаДиска +"]  свободно " + Формат(СвободноеМесто/Объект.ЗнаменательДляГигаБайт, "ЧДЦ=2") + " ГБ из " + Формат(ВсегоМеста/Объект.ЗнаменательДляГигаБайт, "ЧДЦ=2") + " ГБ (" + ТипФС + ")";
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ОписаниеОшибки();
			Сообщение.Сообщить();
		КонецПопытки; 
	Иначе
		Элементы[ИмяЭлементаНадписи].Заголовок = "не готов";
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "В диске нет устройства";
		Сообщение.Сообщить(); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазмерДискаLinuxКлиент(ИмяЭлементаДиска)
	ЗапуститьПриложение(" df | grep "+Объект[ИмяЭлементаДиска]+" > /tmp/size.txt", , Истина);
КонецПроцедуры

&НаСервере
Процедура РазмерДискаLinuxСервер(ИмяЭлементаДиска)
	ЗапуститьПриложение(" df | grep "+СтрЗаменить(Объект[ИмяЭлементаДиска], "//", "/")+" > /tmp/size.txt", , Истина);
	ЗапуститьПриложение(" df -ah > /tmp/size2.txt", , Истина);
	
	//УдалитьФайлы("/tmp/size.txt", "*");
КонецПроцедуры

&НаКлиенте
Процедура КомандаLinux(Команда)
	КомандаLinuxНаСервере();
КонецПроцедуры

&НаСервере
Процедура КомандаLinuxНаСервере()
	ЗапуститьПриложение(СтрокаКомандаЛинукс + " > /tmp/comand.txt",, Истина);
	ТекстДок = Новый ТекстовыйДокумент; 
	ТекстДок.Прочитать("/tmp/comand.txt");
	РазмерыДисков = ТекстДок.ПолучитьТекст();
	УдалитьФайлы("/tmp/comand.txt");
КонецПроцедуры

&НаКлиенте
Процедура СтрокаКомандаЛинуксПриИзменении(Элемент)
	КомандаLinuxНаСервере();
КонецПроцедуры

#КонецОбласти // Размеры_дисков

&НаКлиенте
Процедура ПрочитатьФТПЛево(Команда)
	
	ФТПСоединениеЛево = Новый FTPСоединение(ФТПСерверЛево,, ФТПЛогинЛево, ФТППарольЛево,,, 600);
	ПрочитатьСписокФайловFTP("СписокФайловЛево", "ПутьЛево");
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФТППраво(Команда)
	
	ФТПСоединениеПраво = Новый FTPСоединение(ФТПСерверПраво,, ФТПЛогинПраво, ФТППарольПраво,,, 600);
	ПрочитатьСписокФайловFTP("СписокФайловПраво", "ПутьПраво");
	
КонецПроцедуры

#КонецОбласти // Чтение_списка

#Область Служебные

&НаСервереБезКонтекста
Функция ИмяКомпьютераСервера()
	Возврат ИмяКомпьютера()
КонецФункции
 
// Осуществляет поиск символа, начиная с конца строки. (Портировано из БСП)
//
// Параметры:
//  Строка - Строка - строка, в которой осуществляется поиск;
//  Символ - Строка - искомый символ. Допускается искать строку, содержащую более одного символа.
//
// Возвращаемое значение:
//  Число - позиция символа в строке. 
//          Если строка не содержит указанного символа, то возвращается 0.
//
&НаКлиенте
Функция НайтиСимволСКонца(Знач Строка, Знач Символ)
	
	Для Позиция = -СтрДлина(Строка) По -1 Цикл
		Если Сред(Строка, -Позиция, СтрДлина(Символ)) = Символ Тогда
			Возврат -Позиция;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
		
КонецФункции

&НаКлиенте
Процедура СсылкаНаИнфостарт(Команда)
	//ЗапуститьПриложение("https://infostart.ru/public/890863/");
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ПослеЗапускаПриложения", ЭтаФорма), "https://infostart.ru/public/890863/");
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗапускаПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
		
КонецПроцедуры
 
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	ФТПСоединениеЛево = Неопределено;
	ФТПСоединениеПраво = Неопределено;
	#Если Не ВебКлиент Тогда
	Если ВерсияБольше838 Тогда
		ПанельЗадачОС.УдалитьНаклейку();
	КонецЕсли;
	#КонецЕсли
КонецПроцедуры
 
#КонецОбласти // Служебные

Объект.СтрокаПоддерживаемыхСтроковыхФайлов = ".txt;.log;.ini;.lst;.v8i;.sh;.json;";
СисИнф = Новый СистемнаяИнформация;
МассивПлатформа = СтрРазделить(СисИнф.ВерсияПриложения, ".");
ВерсияБольше838 = Число(МассивПлатформа[1]) = 3 и Число(МассивПлатформа[2]) >=8;
Объект.ЗнаменательДляГигаБайт = 1073741824;